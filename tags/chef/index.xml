<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chef on Sawanoboly.net</title>
    <link>http://www.sawanoboly.net/tags/chef/</link>
    <description>Recent content in Chef on Sawanoboly.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Thu, 25 Dec 2014 00:00:00 +0900</lastBuildDate>
    <atom:link href="http://www.sawanoboly.net/tags/chef/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chef-Solo, Chef-Client LocalMode, Knife-Solo, Knife-Zero and us.</title>
      <link>http://www.sawanoboly.net/2014/12/chef-solo-zero-knife-solo-zero/</link>
      <pubDate>Thu, 25 Dec 2014 00:00:00 +0900</pubDate>
      
      <guid>http://www.sawanoboly.net/2014/12/chef-solo-zero-knife-solo-zero/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;※旧ブログから移植。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Chef-Soloが無くなるので、他の何かに乗り換える必要があるのか。 という話に対してKnife-Zeroをダシに何か言っておこう。&lt;/p&gt;

&lt;p&gt;最初に言っておくと、今Chef-Solo、Knife-Soloを使っている人、多分何もしなくていい。&lt;/p&gt;

&lt;h2 id=&#34;登場人物一覧:8859dd2aeb8fa59e101fd23fc46b536d&#34;&gt;登場人物一覧&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Chef-Solo

&lt;ul&gt;
&lt;li&gt;Chef-Server無しでローカルサーバにChefのレシピを適用する。Chef-Server非互換(11でほぼ改善)。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Chef-Client LocalMode

&lt;ul&gt;
&lt;li&gt;Chef-Server無しでローカルサーバにChefのレシピを適用する。Chef-Server互換。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Knife-Solo

&lt;ul&gt;
&lt;li&gt;レシピ一式を転送し、Chef-Soloをリモートサーバに適用する。&lt;/li&gt;
&lt;li&gt;(追記)全体のワークフローは、VagrantのProvisionerに近い。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Knife-Zero

&lt;ul&gt;
&lt;li&gt;レシピ一式を転送せず、SSH越しにChef-Client LocalModeを実行する。&lt;/li&gt;
&lt;li&gt;(追記)従来のClient／Serverワークフローを踏襲。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;全てのchef-solo関連がにchef-zero-chef-client-localmode-に変更されるというのは飛躍的な判断:8859dd2aeb8fa59e101fd23fc46b536d&#34;&gt;全てのChef-Solo関連がにChef-Zero(Chef-Client LocalMode)に変更されるというのは飛躍的な判断&lt;/h2&gt;

&lt;p&gt;なんとなく騒がれているのは、これの元記事からなのかしら。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.creationline.com/lab/6085&#34;&gt;[和訳] ソロからゼロへ: Chef Clientローカルモードへの移行 #opschefja #getchefja « CREATIONLINE, INC.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本的にこれはサーバのローカルで実行する場合についての話でしょう、まあそれならChef-Client LocalModeに変えるのはほとんど何も変更はいらないのでよくわかります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考： Chef-RFC031 『This means that chef-solo using &amp;ldquo;local mode&amp;rdquo; must be 100% backwards-compatible with existing chef-solo usage.』&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;で、リモートでやるKnife-Soloについて考えた時に、&amp;rdquo;Chef-Solo無くなる&amp;rdquo;＝&amp;rdquo;Knife-Solo使えなくなる&amp;rdquo;でもないわけです。 Knife-Soloは単なる非公式のプラグインであって、公式がこういう記事でいちいち言及しないでしょうね。&lt;/p&gt;

&lt;h3 id=&#34;少なくともknife-soloはchef-soloと心中なんてしないだろう:8859dd2aeb8fa59e101fd23fc46b536d&#34;&gt;少なくともKnife-SoloはChef-Soloと心中なんてしないだろう&lt;/h3&gt;

&lt;p&gt;日本でKnife-Soloがそこそこ広い認知度を持っているのは、&lt;a href=&#34;http://www.amazon.co.jp/dp/B00BSPH158&#34;&gt;伊藤直也さんの入門Chef Solo - Infrastructure as Code&lt;/a&gt;によるところが大きいでしょう。多分そう、部分的にそう。&lt;/p&gt;

&lt;p&gt;この本で覚えたフローや使い方が今後できなくなるかって言うと多分そんなことはなくて。 Knife-Solo開発陣はChefの動向をちゃんと追っています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/matschaffer/knife-solo/issues/353&#34;&gt;add local_mode to solo.rb · Issue #353 · matschaffer/knife-solo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(関連ディレクトリをまるまる転送、リモートでLocalMode相当の実行形式に変更など)&lt;/p&gt;

&lt;p&gt;ということでKnife-Soloでやっているものは、基本的にそのまま使い続けることもできそうだと思ってます。 実際Chef-Soloって無くなるのかも不明、もしかしたらChef14とか15になれば居なくなるのかもしれませんね。&lt;/p&gt;

&lt;h2 id=&#34;knife-zeroはミニマムなchef-server環境とのアップ-ダウングレード移行パス:8859dd2aeb8fa59e101fd23fc46b536d&#34;&gt;Knife-ZeroはミニマムなChef-Server環境とのアップ/ダウングレード移行パス&lt;/h2&gt;

&lt;p&gt;じゃあKnife-Zeroはどういう位置かというと、Chef-Server環境との相互移行がやりやすいChefの導入方法(の一つ)です。 SSH越しにリモートで実行されるChef-ClientはLocalModeではなく、通常のClientモードとしてChef-Server(SSH元のChef-Zero)に対して接続します。&lt;/p&gt;

&lt;p&gt;なのでKnife-Solo(そもそも私は使ってない)の代わりではなく、既存のChef-Serverを畳む用途で作りました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Knife-Zeroではじめて、Node数が増えてきたらChef-Serverへ&lt;/li&gt;
&lt;li&gt;Node数が少ないChef-ServerをたたんでKnife-Zeroへ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knife-Zeroは、概ねお一人様用Chef-Serverという感じです。node情報ををgit管理できたり、エディタで手元からしれっとattributeを追加できたりという利点とかありますが。 大人数で保守する場合や、継続的にChef-Clientを実行したい場合、Nodeがとても多い場合は多分Chef-Serverのほうがよいのかと思います。&lt;/p&gt;

&lt;h2 id=&#34;knife-zero豆知識:8859dd2aeb8fa59e101fd23fc46b536d&#34;&gt;Knife-Zero豆知識&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Chef-Zeroは2,000nodeくらいまでなら性能的に問題ない。 (&lt;a href=&#34;http://qiita.com/sawanoboly/items/35dd2f117262f4f21969&#34;&gt;Chef-Zeroのキャパシティが気になったのでRubyでベンチマークをとった - Qiita&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Knife-Zero制作のきっかけはlightchef(&lt;a href=&#34;https://github.com/ryotarai/itamae&#34;&gt;現itamae(github link)&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;Severspec的発想がいいと思った。&lt;/li&gt;
&lt;li&gt;しかし同時に、『インベントリも収集せずに(light)Chefとはどういう了見か』と思った。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Facebookの中の人も、SSH越しのLocalMode(Chef-Zero)を使っている。

&lt;ul&gt;
&lt;li&gt;手抜きのために考える事は同じだなと思いました。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chef/chef-zero/issues/86&#34;&gt;SSL support · Issue #86 · opscode/chef-zero&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;最初は本家へのPull Requestとして作成していた

&lt;ul&gt;
&lt;li&gt;とても煩雑なコードになって、説明するのが面倒に。&lt;/li&gt;
&lt;li&gt;とりあえずリリースを優先、楽なKnifeのプラグインとして作成。&lt;/li&gt;
&lt;li&gt;本家にマージしたい。(最近はそうでもない。)&lt;/li&gt;
&lt;li&gt;Chef本体からあまりコードの量的に離れたくない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リリース当初の私が書いたコードはほとんど残っていない。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/yasushia&#34;&gt;@yasushia&lt;/a&gt;氏によってリファクタリングが行われ、とてもスッキリしたのでv1.0.0を付けた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;(Fixed) Chef12のRC版ではローカルモードが盛大にクラッシュする。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/opscode/chef/issues/2433&#34;&gt;The localmode doesn&amp;rsquo;t create node object correctly on chef 12. · Issue #2433 · opscode/chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Knife-Zeroは自分では便利なので12対応はしておきたいんだけど。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;羅列したこの記事のタイトルで、一番寿命が先に来るのは、もしかしてKnife-Zeroかもしれないよ。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;(New) 治した！ &lt;a href=&#34;https://github.com/chef/chef/pull/2482&#34;&gt;use Chef::JSONCompat.parse for filecontents #2433 by sawanoboly · Pull Request #2482 · opscode/chef&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つらつらと書きましたが、Knife-Zeroは色々と楽をできるように作ったので、新規のシステムをChefで作り始めるとか、既存のシステムにChefを導入するとかならKnife-Zeroをおすすめします。&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>『Chef活用ガイド コードではじめる構成管理』を書きました</title>
      <link>http://www.sawanoboly.net/2014/04/chefbook/</link>
      <pubDate>Sat, 19 Apr 2014 00:00:00 +0900</pubDate>
      
      <guid>http://www.sawanoboly.net/2014/04/chefbook/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;※旧ブログから移植。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;米Chef社(&lt;a href=&#34;http://www.getchef.com/&#34;&gt;http://www.getchef.com/&lt;/a&gt;)が開発しているChefというソフトウェアの本を、クリエーションライン株式会社の樋口さんと共著しました。&lt;a href=&#34;http://ascii.asciimw.jp/books/books/detail/978-4-04-891985-2.shtml&#34;&gt;アスキー・メディアワークス&lt;/a&gt;さんから出版されてます。&lt;/p&gt;

&lt;p&gt;発売を前に手元に２冊届きました、少々ボリュームのあるサイズ(672P)となっています。&lt;/p&gt;

&lt;img src=&#34;http://www.sawanoboly.net/images/2014/chef_book.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;


&lt;h2 id=&#34;何を書いたのか:c4c2c2a15aa3f63bc2a9e0adabb4cb59&#34;&gt;何を書いたのか&lt;/h2&gt;

&lt;p&gt;導入はInfrastructure as Codeという概念について述べています。 その後はInfrastructure as Codeの１要素としてChefを利用することへの助けとなるべく、Chefの全要素を出来る限り詳しく解説しています。&lt;/p&gt;

&lt;p&gt;Chefの解説については書き下ろしと、公式ドキュメントにある要素をいくらか組み直して、細かい解説などを入れながら再構成して章立てした内容になっています。 書き下ろし部分の内容を考えるために最も参考にしたのはChef-Clientのソースコードでした。&lt;/p&gt;

&lt;p&gt;最後に付録として、執筆当時に公式のリファレンスに存在したCookbook(Resources)やLWRPの和訳などをつけています。 付録のうち和訳部分に関しては、重複するサンプルを抽出して読みやすさを調整したり、コードに間違いがある部分などを本家にフィードバックしながら修正したりといった手を加えています。&lt;/p&gt;

&lt;p&gt;本編４５０P、付録が２００P強という内訳です。&lt;/p&gt;

&lt;h3 id=&#34;誰に向けて書いたのか:c4c2c2a15aa3f63bc2a9e0adabb4cb59&#34;&gt;誰に向けて書いたのか&lt;/h3&gt;

&lt;p&gt;導入部分はどちらかというとChefの採用を検討するマネジメント層や、極端なところでITサービスプロバイダの経営層に向けて書いています。 Infrastructure as Codeという概念を引き合いに、最近サービスを支えるインフラに対して提言されているのはこのようなことですよと紹介し、コストやリスクを減らしていきましょうという呼びかけをしています。&lt;/p&gt;

&lt;p&gt;導入部以降はいわゆる現場向けといえそうです。Chefを内部の構造からまあまあ詳細に解説しているので、実際にChefを触ってみたい・触っている・もっと使いこなしたいという方々や、Chefの挙動に興味や疑問を持つ方々に是非読んでいただきたいと思っています。&lt;/p&gt;

&lt;h3 id=&#34;書かれていないこと:c4c2c2a15aa3f63bc2a9e0adabb4cb59&#34;&gt;書かれていないこと&lt;/h3&gt;

&lt;p&gt;そもそもChefだけでインフラの管理がよくなるという事は決してありませんし、この本でも出だしにそう断りを入れています。 コンピュータシステムのライフサイクル管理を効率良く行なうには、用途および組織にあったツールチェーンを確立するのが望ましいことは重々承知ですが、Chefから少し離れる要素や、他のツールからワークフローの一部として使われるChefについては、この本ではほぼ解説していません。&lt;/p&gt;

&lt;p&gt;そして、この本はあくまでガイドという位置づけであり、導入の検討や適用範囲はあくまで組織でのプランやコストを考慮して各自が行わなければなりません。もちろん事例やサンプルもそれなりに書いており、参考にすることもできますが、どこでも通用するベスト・プラクティスというわけでもありません。 (観光ガイドブックであれば、名所の場所は書かれていても、観光レポートは無いでしょう？)&lt;/p&gt;

&lt;p&gt;ただ、テーマをChefだけに絞ったこともあり、現状で書籍という形に限れば世界中で比べても一番Chefについて詳しく書かれた本(あとOhaiも)になっていると思います。 検討の材料、導入後のリファレンスとしても十分役に立つでしょう。&lt;/p&gt;

&lt;h3 id=&#34;なぜ書いたのか:c4c2c2a15aa3f63bc2a9e0adabb4cb59&#34;&gt;なぜ書いたのか&lt;/h3&gt;

&lt;p&gt;至る経緯は諸所ありますが、お話をいただいたからです。&lt;/p&gt;

&lt;p&gt;その時点でそこそこChefを使ったり、他所に導入したりを始めていたので次のような理由で受けました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自分がChefを忘れても大丈夫なように、本にまとめておけるならラッキー&lt;/li&gt;
&lt;li&gt;人に説明するときにラク&lt;/li&gt;
&lt;li&gt;人からの質問がいくらか具体的になる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;どのように書いていたのか:c4c2c2a15aa3f63bc2a9e0adabb4cb59&#34;&gt;どのように書いていたのか&lt;/h3&gt;

&lt;p&gt;動いていたのは2013年7月〜2014年4月、そのうち9月後半〜１月にほとんどの内容が書かれました。
書き始める前はソースコードや関連資料の調査、１月後半からは校正につぐ校正。&lt;/p&gt;

&lt;p&gt;原稿の管理と、共同執筆中のコミュニケーションではこれらが役に立ちました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;github(git)&lt;/li&gt;
&lt;li&gt;Skype&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容はGithubのリポジトリを更新して共有し、やや大きめなテーマはIssueとして管理、ちょっとした方針や文章のすり合わせはSkypeでと、快適な執筆環境を目指してツールを活用することにしました。(Skypeではくだらない雑談も相当交わされましたが)&lt;/p&gt;

&lt;p&gt;共著の樋口さんとは、本について７月(&lt;a href=&#34;http://chef-meetup-kansai.doorkeeper.jp/events/4978&#34;&gt;第１回 Chef Casual Talks Kansai&lt;/a&gt;の翌日)に分担を決めた後は、一度も顔を合わせることなくすべての作業を終えることが出来ました。&lt;/p&gt;

&lt;p&gt;私の側では、主にこれらのツールで原稿を作成しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;エディタ(vim, bbedit)&lt;/li&gt;
&lt;li&gt;プレビュー(Mou, Marked, git(差分))&lt;/li&gt;
&lt;li&gt;Chefのソースビュアー(vim, git(差分および履歴))&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プレビューツールからわかると思いますが、生原稿はMarkdownでした。 原稿書きには、gitのログと差分確認がかなり役立ちます。&lt;/p&gt;

&lt;p&gt;校正段階では主にこれらのツールで原稿の修正にあたりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mail &amp;amp; unzip, mi(旧ミミカキエディット)&lt;/li&gt;
&lt;li&gt;github(git)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;初稿より後は、MarkdownではなくEWBで(変換された)となったんですが、文字コードがEUC-JPでbbeditがイマイチ自動判別しなかったので、国産エディタのmiに頼りました。&lt;/p&gt;

&lt;p&gt;ここでもやっぱりGithubが活躍します。章ごとのブランチを作成して、平行して校正を進めたり、適用漏れを抽出して追跡したり、 gitリポジトリは軽作業などもふくめて、結局2200コミットくらいになりました。&lt;/p&gt;

&lt;img src=&#34;http://www.sawanoboly.net/images/2014/chef_book_commits.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;


&lt;p&gt;環境用品のうち、特に活躍した3つをピックアップします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MacBook Pro Retina13

&lt;ul&gt;
&lt;li&gt;QuickResで、画面をかなり広くして使用、参考資料を見ながらの執筆に&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Contessa (岡村製作所)

&lt;ul&gt;
&lt;li&gt;作業に集中するのに調度良かった&lt;/li&gt;
&lt;li&gt;腰痛が全然気にならなくなった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SHOT NOTE(KING JIM)

&lt;ul&gt;
&lt;li&gt;構成図等の提出はこれに手書きして取り込んだ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;最後に:c4c2c2a15aa3f63bc2a9e0adabb4cb59&#34;&gt;最後に&lt;/h3&gt;

&lt;p&gt;本書を書くのは中々骨の折れる作業でしたが、周囲の協力者や家族の理解もあって、ようやく書店に置かれる所までこぎつけました。 あとは料理本のコーナーに並ばないことだけを祈っておきます。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=netsawa-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4048919857&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=netsawa-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B0008JIECE&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3 id=&#34;追記-chef活用ガイド-読者アンケートを作成しました:c4c2c2a15aa3f63bc2a9e0adabb4cb59&#34;&gt;追記、『Chef活用ガイド』読者アンケートを作成しました。&lt;/h3&gt;

&lt;p&gt;この本を読んでいただいた方(購入・回し読み問わず)を対象に、アンケートを作成しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jp.surveymonkey.com/s/HSL5QBK&#34;&gt;書籍『Chef活用ガイド』読者アンケート Survey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;では締めを&lt;a href=&#34;http://vdr.jp/d/20140421.html&#34;&gt;Chef活用ガイド コードではじめる構成管理 - vdrめも(2014-04-21)&lt;/a&gt;から引用で。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;世に出るのはもう少し先で、その上読み終えるにはかなりの時間がかかるかと思いますが、よろしければご回答いただければ幸いです。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Chef-Server環境で使うCookbookをVagrantとChef-zeroで開発する</title>
      <link>http://www.sawanoboly.net/2014/03/vagrant-with-chef-zero/</link>
      <pubDate>Wed, 05 Mar 2014 00:00:00 +0900</pubDate>
      
      <guid>http://www.sawanoboly.net/2014/03/vagrant-with-chef-zero/</guid>
      <description>

&lt;p&gt;最近はChef-Severの導入も簡単になりました。 &lt;a href=&#34;http://www.getchef.com/chef/install/&#34;&gt;パッケージから導入&lt;/a&gt;はもちろん、&lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B010OMNV2W&#34;&gt;aws marketplace&lt;/a&gt;からすぐ使用できたりと。&lt;/p&gt;

&lt;p&gt;とはいえテスト環境にChef-Serverを強いるのも大変なので、Chef-Zeroで代わりをしてもよいでしょう。&lt;/p&gt;

&lt;h2 id=&#34;chef-zero:0368959aa60ef0f09c2c4a2771bc5778&#34;&gt;Chef-zero&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chef/chef-zero&#34;&gt;https://github.com/chef/chef-zero&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chef-zeroはChef-Serverのホットモックのようなものです。ほぼChef-Serverとして動作する小さなプロセスですが次の特徴があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;認証はするフリで全部OK&lt;/li&gt;
&lt;li&gt;データはメモリに保存、永続化なし&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chef-Serverを使ったCookbookの開発をする際に、データをクリアしたい場合もありますが意外と後処理が面倒です。 Chef-zeroならプロセスのリスタートで綺麗な状態になるので、knifeで必要な要素を戻すだけで再度テストを行なうことができます。&lt;/p&gt;

&lt;p&gt;詳細は次のリンクが参考になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.creationline.com/lab/2749&#34;&gt;軽量簡易Chef Server「chef-zero」を使ってみよう #opschef_ja « CREATIONLINE, INC.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vagrantでchef-zero:0368959aa60ef0f09c2c4a2771bc5778&#34;&gt;VagrantでChef-zero&lt;/h2&gt;

&lt;p&gt;ではChef-zeroのプロセスをどこに立てるか。&lt;a href=&#34;https://github.com/test-kitchen/test-kitchen&#34;&gt;test-kitchen&lt;/a&gt;ではCookbookをテストするVMで直接Chef-zeroを起動して、ダミーのChef要素を入れることができますが、現時点ではそのままシームレスにChef-Server環境に持って行こうとするにはいまいち感があります。&lt;/p&gt;

&lt;p&gt;じゃあVagrantだろうなということで、一式書いてリポジトリに登録しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpsRockin/vagrantwithchefzero_example&#34;&gt;https://github.com/OpsRockin/vagrantwithchefzero_example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;http://www.sawanoboly.net/images/2014/vagrant_with_chef-zero.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;


&lt;p&gt;これならvagrant up chefzeroするだけでChef-zeroをほぼChef-Serverとして使い放題です。&lt;/p&gt;

&lt;p&gt;chefzeroのVMだけはChef-Soloで構築しますが、ほかのVMはChef-zeroに対するChef-ClientとしてProvisioningすることができます。&lt;/p&gt;

&lt;p&gt;最初は手元だけ直して、Cookbookのアップロードを忘れることもありますが、すぐ慣れるでしょう。&lt;/p&gt;

&lt;p&gt;通常操作はknifeを使えるので、他の環境に持っていく際にknife.rb指定の切り替えで済むのが助かりますね。&lt;/p&gt;

&lt;h2 id=&#34;開発作業用のrakefile:0368959aa60ef0f09c2c4a2771bc5778&#34;&gt;開発作業用のRakefile&lt;/h2&gt;

&lt;p&gt;レシピ開発＆テストを効率よく行なうには、とりあえずRakeのタスクを作っておくとよいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;task :default =&amp;gt; &#39;upload&#39;
$stdin.sync = true

desc &#39;upload chef-repos to chefzero vm&#39;
task :upload do
  system(&#39;knife cookbook upload --all&#39;)
  system(&#39;knife upload environments/ &#39;)
  system(&#39;knife upload roles/ &#39;)
end

desc &#39;reset chefzero&#39;
task :reset do
  system(&#39;vagrant reload chefzero&#39;)
  Rake::Task[&#39;chefzero:upload&#39;].invoke
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それぞれこんな作業をやらせています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake upload # Chef要素のアップロード
rake reset  # Chef-zero内容クリア＆要素の再アップロード
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;その他:0368959aa60ef0f09c2c4a2771bc5778&#34;&gt;その他&lt;/h2&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;https://github.com/whitepages/vagrant-chefzero&#34;&gt;vagrant-chefzero&lt;/a&gt;というプラグインもあり、これはEnvやRole要素の投入までVagrantファイル内でやるようです。&lt;/p&gt;

&lt;p&gt;knifeを使わないのが逆に気になるので今回はCookbookでChef-zeroをセットアップしてます。&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>第一回XEggで『さくらのクラウドフォーメーション with Chef 』</title>
      <link>http://www.sawanoboly.net/2014/02/xegg-sakura-with-chef/</link>
      <pubDate>Sun, 16 Feb 2014 00:00:00 +0900</pubDate>
      
      <guid>http://www.sawanoboly.net/2014/02/xegg-sakura-with-chef/</guid>
      <description>

&lt;p&gt;2月15日に大阪のグランフロントで開催された、&lt;a href=&#34;http://innovationegg.doorkeeper.jp/events/7435&#34;&gt;Innovation EGG 第二回 XEgg 1st『クラウド未経験者向けITコミュニティ＆クラウドベンダー合同勉強会』&lt;/a&gt;で行ったセッションの話。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://innovationegg.doorkeeper.jp/&#34;&gt;Innovation EGGとは？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;イベントのテーマと課題:abd5cc46a07d774db12ec7a3776e3d26&#34;&gt;イベントのテーマと課題&lt;/h2&gt;

&lt;p&gt;今回声がかかったのはXEgg(クロスエッグ)と題されたイベントで、テーマによって選出されたベンダにITコミュニティを組み合わせてなんかやってくれと言う話だった。&lt;/p&gt;

&lt;p&gt;第一回XEggのテーマはクラウド、私は&lt;a href=&#34;http://chef-meetup-kansai.doorkeeper.jp/&#34;&gt;Chef meetup Kansai&lt;/a&gt;の主催者としてITコミュニティ枠で参加。 さわる対象のクラウドベンダは『さくらインターネット』、要は『さくらのクラウド』を触りましょうと。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/oTufMIf9dcRFMa&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/YukihikoSawanobori/x-egg01-chef&#34; title=&#34;さくらのクラウドフォーメーション with Chef [XEgg session]&#34; target=&#34;_blank&#34;&gt;さくらのクラウドフォーメーション with Chef [XEgg session]&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/YukihikoSawanobori&#34; target=&#34;_blank&#34;&gt;Yukihiko SAWANOBORI&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;セッション裏話:abd5cc46a07d774db12ec7a3776e3d26&#34;&gt;セッション裏話&lt;/h2&gt;

&lt;p&gt;セッションの大筋はスライドの通りで、話した内容はその場で聞いていただいた方々がご存知です。 ブログではどうしてあんなセッションになったのか振り返ってみます。&lt;/p&gt;

&lt;h3 id=&#34;ターゲットの決定:abd5cc46a07d774db12ec7a3776e3d26&#34;&gt;ターゲットの決定&lt;/h3&gt;

&lt;p&gt;イベントの参加対象者は、『クラウド未経験者』とのことでした。ずいぶんもやっとしています。&lt;/p&gt;

&lt;p&gt;セッションの内容をChef初心者向けに丁寧に解説とすることも考えましたが、テーマからいって参加者がChefに興味あるとも限らないうえ、同時に動いていたプロジェクトのこともあわせて、そういうのは 私が飽きていました 。&lt;/p&gt;

&lt;p&gt;そもそも私はChefを売ってるわけでもないし、イベントの主軸はクラウドベンダだし、どうせなら自分が興味あることをセッションにしてしまうほうが楽しい。&lt;/p&gt;

&lt;p&gt;ということでセッションのターゲットはクラウドベンダの『さくらインターネットのスタッフ』と、同枠の『MongoDBコミュニティ』に絞りました。&lt;/p&gt;

&lt;h3 id=&#34;chefの紹介:abd5cc46a07d774db12ec7a3776e3d26&#34;&gt;Chefの紹介&lt;/h3&gt;

&lt;p&gt;Chefはその特性上適用できる範囲がとても広く、組織によって様々に使い方を選べます。 そもそもChefには決まった使い方も無く、あるのは各組織のワークフローやポリシーに合わせてシステムの構成管理をできる柔軟性くらいです。&lt;/p&gt;

&lt;p&gt;説明したってきりがないので、旧態依然とした構成管理への皮肉を交えつつ、最初から視聴者全員置いてきぼりを目標にさっと流しました。&lt;/p&gt;

&lt;p&gt;イベントテーマ的に主役では無いですし。&lt;/p&gt;

&lt;h3 id=&#34;使ってみました系と海外との比較:abd5cc46a07d774db12ec7a3776e3d26&#34;&gt;使ってみました系と海外との比較&lt;/h3&gt;

&lt;p&gt;このへんは裏表あまりなく、結構思うまま言ったらこうなった。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;sawanoboly氏、さくらの田中さんの前でさくらのクラウドAPIのdisを繰り広げている。でもこういうのは参考意見として良いよね。 &lt;a href=&#34;https://twitter.com/hashtag/xegg?src=hash&#34;&gt;#xegg&lt;/a&gt;&lt;/p&gt;&amp;mdash; MATSUMOTO, Ryosuke (@matsumotory) &lt;a href=&#34;https://twitter.com/matsumotory/status/434508042814513152&#34;&gt;2014, 2月 15&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;コンピュータリソースに特化したサービスと比べるのは少々ごまかしを含みますが、ややインパクトを重視してChefと手っ取り早く連携させたりとりあえずサービスをリリースしようといった視点からあえて見た体で展開することにしました。&lt;/p&gt;

&lt;p&gt;実際、『ボクのデータセンター』を作りたい方には非常にいいと思います。&lt;/p&gt;

&lt;p&gt;ここの中で『ホビー対傭兵』という比喩が出てきますが、この表現にもうちょっとだけ突っ込んでみます。&lt;/p&gt;

&lt;p&gt;日本の企業は上流工程をプロパーが行い、開発や現場やを外注に任せるという図式がよく見られます。 自社好みにカスタマイズ可能なプロパーと、プロとして現場の取り仕切りを任せる外注さんと。スライドの傭兵さんはいわば外注に当たるわけですね。&lt;/p&gt;

&lt;p&gt;国内ベンダと海外ベンダで提供するサービスと需要とに、なんだかちょっとねじれがあるような気がしています。&lt;/p&gt;

&lt;h3 id=&#34;fogの-さくらのクラウド-サポートについて:abd5cc46a07d774db12ec7a3776e3d26&#34;&gt;Fogの『さくらのクラウド』サポートについて&lt;/h3&gt;

&lt;p&gt;以前から国内クラウド向けにはChefに関連したライブラリ(&lt;a href=&#34;http://rubygems.org/gems/knife-zcloudjp&#34;&gt;knife-zcloudjp&lt;/a&gt;,&lt;a href=&#34;http://rubygems.org/gems/kitchen-zcloudjp&#34;&gt;kitchen-zcloudjp&lt;/a&gt;など)を公開しており、機会があればFogのプロバイダも書いてみたいと思っていました。&lt;/p&gt;

&lt;p&gt;そもそもFogに日本のプロバイダがないのは前々から気に入らなかったこともあって、今回の『さくらのクラウド』はそこそこ渡りに船でした。&lt;br /&gt;
日本語がわからないとサインアップが困難だったりするのですが、そこは気にしないことにします。&lt;/p&gt;

&lt;p&gt;このFog対応に思ったより時間をとられたので、他のやりたかったことができなかった弊害はありましたが、コンピュータリソースがカジュアルに上がってこないと(Chef的に)使いづらかったことは確かなので仕方がありませんでした。&lt;/p&gt;

&lt;h3 id=&#34;chefとインテグレーション:abd5cc46a07d774db12ec7a3776e3d26&#34;&gt;Chefとインテグレーション&lt;/h3&gt;

&lt;p&gt;スタートアップスクリプトのような使い捨てでなく、クラウドAPIを叩く瞬間からChefの支配は始まっているんですよというアピールをしてみました。 せいぜい計算リソースにすぎないコンピュータインスタンスに、たとえばわざわざ名前をつけて可愛がりながら育てるなんて、もはやナンセンスではないのかという啓発も込めています。&lt;/p&gt;

&lt;h2 id=&#34;まとめと今後の展開:abd5cc46a07d774db12ec7a3776e3d26&#34;&gt;まとめと今後の展開&lt;/h2&gt;

&lt;p&gt;言いたい放題のセッションでしたが、定めたターゲットさくらインターネットのスタッフ一同には田中社長をはじめ『面白かった』と感想をいただいたのでめでたしめでたしと。&lt;/p&gt;

&lt;p&gt;しかし今回時間の関係上、『さくらのクラウド』の全力を引き出したとは言いがたい。&lt;br /&gt;
そしてクラウドフォーメーションと銘打っておきながら、ネットワーク関係やLB、それと先日発表されたクラウドストレージにも手を出していません。&lt;/p&gt;

&lt;p&gt;できればyamlかjsonの定義ファイルを食わせればシステム構築するところまで、それこそ某クラウドフォーメーション程度の実装までしておきたいなあ。&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>
